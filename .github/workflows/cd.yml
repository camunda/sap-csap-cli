name: CD for csap CLI

on:
  push:
    branches:
      - main
    # paths:
    #   - "**/*.ts"

# Set DENO_DIR to an absolute or relative path on the runner.
env:
  DENO_DIR: ${{ github.workspace }}/.deno-cache
  version: ""

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ### FIXME: test involving native git commands fails on ubuntu-latest
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [macos-latest, windows-latest]
    steps:
      - name: line endings for windows
        if: runner.os == 'Windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      # - name: Cache Deno dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.DENO_DIR }}
      #     key: ${{ hashFiles('deno.lock') }}-${{ runner.os }}

      - name: Run tests
        run: deno test --allow-all

  release:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      # - name: Cache Deno dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.DENO_DIR }}
      #     key: ${{ hashFiles('deno.lock') }}-${{ runner.os }}

      - name: deno install
        run: deno install

      - name: Run compile-all-targets.sh
        run: |
          chmod +x scripts/compile-all-targets.sh
          ./scripts/compile-all-targets.sh

      - name: Get version from deno.json
        id: get-version
        run: |
          VERSION=$(jq -r '.version' deno.json)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: create gh release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.version }}
          allowUpdates: "true"
          removeArtifacts: "true"
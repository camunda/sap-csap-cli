name: CD for csap CLI

on:
  push:
    branches:
      - main
    # paths:
    #   - "**/*.ts"

# Set DENO_DIR to an absolute or relative path on the runner.
env:
  DENO_DIR: ${{ github.workspace }}/.deno-cache
  version: ""

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: line endings for windows
        if: runner.os == 'Windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.4.5

      # - name: Cache Deno dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.DENO_DIR }}
      #     key: ${{ hashFiles('deno.lock') }}-${{ runner.os }}

      - name: set tmp git identifiers (for tests involving git)
        run: |
          git config --global user.name "Camunda gh action"
          git config --global user.email "camunda@noreply.github.local"

      - name: Run tests
        run: deno test --allow-all
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: test
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.4.5

      # - name: Cache Deno dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.DENO_DIR }}
      #     key: ${{ hashFiles('deno.lock') }}-${{ runner.os }}

      - name: deno install
        run: deno install

      - name: Get version from deno.json
        id: get-version
        run: |
          VERSION=$(jq -r '.version' deno.json)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/distribution/ci APPLE_CERTIFICATE;
            secret/data/products/distribution/ci APPLE_CERTIFICATE_PASSWORD;
            secret/data/products/distribution/ci APPLE_DEVELOPER_ID;
            secret/data/products/distribution/ci APPLE_DEVELOPER_PASSWORD;
            secret/data/products/distribution/ci APPLE_TEAM_ID;
            secret/data/products/distribution/ci APPLE_COMMON_NAME;

      - name: Run compile-all-targets.sh
        run: |
          chmod +x scripts/compile-all-targets.sh
          ./scripts/compile-all-targets.sh

      - name: move macOS builds into separate folder
        run: |
          mkdir -p dist/macos
          mv ./dist/csap-x86_64-apple-darwin ./dist/macos/
          mv ./dist/csap-aarch64-apple-darwin ./dist/macos/

      - name: sign and notarize
        uses: ./.github/actions/sign-and-notarize
        with:
          p12-base64: ${{ steps.secrets.outputs.APPLE_CERTIFICATE }}
          p12-password: ${{ steps.secrets.outputs.APPLE_CERTIFICATE_PASSWORD }}
          developer-id-cert-name: ${{ steps.secrets.outputs.APPLE_DEVELOPER_ID }}
          apple-id: ${{ steps.secrets.outputs.APPLE_DEVELOPER_ID }}
          app-password: ${{ steps.secrets.outputs.APPLE_DEVELOPER_PASSWORD }}
          team-id: ${{ steps.secrets.outputs.APPLE_TEAM_ID }}
          path: ./dist/macos

      - name: unzip signed and notarized files
        run: |
          cd dist
          ditto -xk signed.zip .
          chmod +x macos/*
          mv macos/* ./
          rm -rf macos
          rm -rf signed.zip

      - name: create gh release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.version }}
          allowUpdates: "true"
          removeArtifacts: "true"
